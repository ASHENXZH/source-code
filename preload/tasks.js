module.exports=function(){const{ipcRenderer:s}=require("electron"),{openArticle:e,viewArticle:t,getRandomArticleURL:a}=require("./articles.js"),{getRandomVideoURL:n,watchVideo:r}=require("./videos.js");let o=[async()=>{await e(await a())},t,async()=>{await t(130,!0)},async()=>{const s=await n();location.href=s},r,async()=>{await r(190,!0)}],c={1:[o[0],o[1]],2:[o[0],o[2]],4:[o[3],o[4]],5:[o[3],o[5]]};const i={_TaskNumbers2Tasks:s=>s.map(s=>o[s]),_Tasks2TaskNumbers:s=>s.map(s=>o.indexOf(s)),getAll(){const e=s.sendSync("tasks-getAll");return i._TaskNumbers2Tasks(e)},set(e){const t=i._Tasks2TaskNumbers(e);s.send("tasks-set",t)},add(...e){const t=i._Tasks2TaskNumbers(e);s.send("tasks-add",...t)},clear(){i.set([])},get tasks(){return i.getAll()},set tasks(s){i.set(s)},*do(s){for(;s.length>0;){const e=s.shift();i.set(s),yield e()}},async doAll(s){const e=[];for await(let t of i.do(s))e.push(t);return e}};return{TaskList:i,taskTypes:o.concat(),taskBundles:c}}();